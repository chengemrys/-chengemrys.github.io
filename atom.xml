<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EmrysCheng的技术博客</title>
  
  <subtitle>专注于后端邻域开发</subtitle>
  <link href="https://emryscheng.github.io/atom.xml" rel="self"/>
  
  <link href="https://emryscheng.github.io/"/>
  <updated>2025-01-01T15:47:46.263Z</updated>
  <id>https://emryscheng.github.io/</id>
  
  <author>
    <name>EmrysCheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows 使用 OpenSSL 生成的自签名证书并使用 Nginx 配置反向代理.md</title>
    <link href="https://emryscheng.github.io/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>https://emryscheng.github.io/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2025-01-01T15:09:20.000Z</published>
    <updated>2025-01-01T15:47:46.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h2><h3 id="安装 OpenSSL"><a href="# 安装 OpenSSL" class="headerlink" title="安装 OpenSSL"></a>安装 OpenSSL</h3><h4 id="下载 OpenSSL 安装包"><a href="# 下载 OpenSSL 安装包" class="headerlink" title="下载 OpenSSL 安装包"></a>下载 OpenSSL 安装包 </h4><p> 前往<a href="https://slproweb.com/products/Win32OpenSSL.html">https://slproweb.com/products/Win32OpenSSL.html</a> 下载 win OpenSSL 安装包</p><p>exe 和 msi 二选一即可。注意，我们 Light 版本是轻量版，我们直接下载完整版本。</p><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101231603366.png" class=""title="image-20250101231603366"><p>下载下来是 Win64OpenSSL_Light-3_1_1.msi</p><h4 id="安装"><a href="# 安装" class="headerlink" title="安装"></a>安装 </h4><p> 安装过程多数选择默认即可。</p><p>注意在选择将 OpenSSL 的 DLL 安装到 <code>Windows/System/</code> 下还是安装目录的 bin 目录下时，我们选择 <code>bin</code> 目录，&#x3D;&#x3D; 避免 System 目录下其他软件的 DLL 影响 OpenSSL&#x3D;&#x3D;</p><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/877506976178db09e040dca003dac208.png" class=""title="image-20230620165052362"><p>其他页面一直点击下一步即可安装完成。</p><p>最后这个页面可以选择给作者打赏，不打赏的话全部取消勾选即可。</p><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/327eacc75ff5a515ee1d78f7d5cf0ce5.png" class=""title="image-20230620165435140"><p>安装完成</p><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101232907901.png" class=""title="image-20250101232907901"><h3 id="验证安装是否正确"><a href="# 验证安装是否正确" class="headerlink" title="验证安装是否正确"></a>验证安装是否正确 </h3><p> 进入 OpenSSL 安装目录，并将进入其 bin 目录中，在该目录下打开 cmd，输入命令查看版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl version</span><br></pre></td></tr></table></figure><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101232607248.png" class=""title="image-20250101232607248"><p>可以看到安装成功。如果不是我们安装的版本信息，可能需要重启电脑。</p><h4 id="使用 OpenSSL 生成自签名证书"><a href="# 使用 OpenSSL 生成自签名证书" class="headerlink" title="使用 OpenSSL 生成自签名证书"></a>使用 OpenSSL 生成自签名证书</h4><ul><li><p>创建 SSL 文件夹，用于存放生成的证书文件，并进入文件夹中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\Tool\OpenSSL\bin</span><br></pre></td></tr></table></figure></li><li><p>生成服务器私钥（.key 文件）</p><p>输入以下命令生成秘钥文件:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Tool</span>\<span class="title">OpenSSL</span>\<span class="title">bin</span>\<span class="title">openssl</span> <span class="title">genrsa</span> -<span class="title">des3</span> -<span class="title">out</span> <span class="title">server.pass.key</span> 2048</span></span><br></pre></td></tr></table></figure><p>随后输入一个 4 位以上的密码，然后再输入一次密码。如图</p><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101233225119.png" class=""title="image-20250101233225119"><p>命令解释如下：</p><blockquote><p>genra：生成 RSA 私钥<br>-des3：使用 des3 算法<br>-out ：指定生成文件名<br>2048：私钥长度设置为 2048</p></blockquote><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101233252157.png" class=""title="image-20250101233252157"></li><li><p>去除私钥中的密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Tool\OpenSSL\bin\openssl rsa -<span class="keyword">in</span> server.pass.key -out server.key</span><br></pre></td></tr></table></figure><blockquote><p>rsa: 生成 RSA 私钥</p><p>-in：输入私钥文件</p><p>-out: 输出私钥文件</p><p>无密码：设置无密码的私钥文件</p></blockquote><p>随后输入 server.pass.key 的密码。如图：</p><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101233403199.png" class=""title="image-20250101233403199"><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101233432675.png" class=""title="image-20250101233432675"></li><li><p>生成证书签名请求（.csr 文件）</p><p>输入以下命令生成证书签名请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Tool\OpenSSL\bin\openssl req -new -key server.key -out server.csr -subj <span class="string">&quot;/C=CN/ST=Zhejiang/L=Hangzhou/O=OrganizeName/OU=UnitName/CN=pwd.nicollcheng.cn&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>req：生成证书签名请求<br>-new：新生成<br>-key：私钥文件<br>-out：指定生成的 CSR 文件名<br>-subj：生成 CSR 证书的参数</p></blockquote><p>subj 参数说明如下：</p><table><thead><tr><th>字段</th><th>全称</th><th>举例</th></tr></thead><tbody><tr><td>&#x2F;C&#x3D;</td><td>Country 国家</td><td>CN</td></tr><tr><td>&#x2F;ST&#x3D;</td><td>State or Province 州 &#x2F; 省</td><td>Zhejiang</td></tr><tr><td>&#x2F;L&#x3D;</td><td>Location or City 城市</td><td>Hangzhou</td></tr><tr><td>&#x2F;O&#x3D;</td><td>Organization 组织 &#x2F; 企业</td><td>OrganizeName</td></tr><tr><td>&#x2F;OU&#x3D;</td><td>Organization Unit 部门</td><td>UnitName</td></tr><tr><td>&#x2F;CN&#x3D;</td><td>Common Name 域名 or IP</td><td><a href="http://www.yourdomain.com/">www.yourdomain.com</a> 或者 192.168.x.x</td></tr></tbody></table><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101233751720.png" class=""title="image-20250101233751720"><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101233802407.png" class=""title="image-20250101233802407"></li><li><p>生成自签名 SSL 证书（.crt 文件）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Tool\OpenSSL\bin\openssl x509 -req -days 3650 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br></pre></td></tr></table></figure><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101233854458.png" class=""title="image-20250101233854458"><blockquote><p>-days：证书有效期</p><p>-req：需要证书</p><p>-in：输入 csr 文件</p><p>-signkey：指定 .key 文件</p><p>-out：输出 crt 文件</p></blockquote><p>文件夹总共有 4 个文件，server.pass.key 、server.key、server.csr、server.crt。</p><p>其中配置 nginx 的话需要 server.key 和 server.crt 两个文件。</p><p>至此，证书生成完成。</p><blockquote><p>X.509 证书包含三个文件：key，csr，crt<br>key 是服务器上的私钥文件，用于对发送给客户端数据的加密，以及对从客户端接收到数据的解密 <br>csr 是证书签名请求文件，用于提交给证书颁发机构（CA）对证书签名<br>crt 是由证书颁发机构（CA）签名后的证书，或者是开发者自签名的证书，包含证书持有人的信息，持有人的公钥，以及签署者的签名等信息<br> 备注：在密码学中，X.509 是一个标准，规范了公开秘钥认证、证书吊销列表、授权凭证、凭证路径验证算法等。</p></blockquote><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101233941073.png" class=""title="image-20250101233941073"></li></ul><h3 id="自签名证书的使用 - 以 Nginx 为例"><a href="# 自签名证书的使用 - 以 Nginx 为例" class="headerlink" title="自签名证书的使用 (以 Nginx 为例)"></a> 自签名证书的使用 (以 Nginx 为例)</h3><h4 id="服务端上传 SSL 证书"><a href="# 服务端上传 SSL 证书" class="headerlink" title="服务端上传 SSL 证书"></a> 服务端上传 SSL 证书 </h4><p>Web 服务器需要把<code>server.crt</code> 发给浏览器验证，然后用 <code>server.key</code> 解密浏览器发送的数据。(剩下两个文件 <code>server.pass.key</code> 和 <code>server.csr</code> 已经不需要了)。</p><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101234158298.png" class=""title="image-20250101234158298"><h4 id="服务端配置 443 端口并使用 SSL 证书"><a href="# 服务端配置 443 端口并使用 SSL 证书" class="headerlink" title="服务端配置 443 端口并使用 SSL 证书"></a>服务端配置 443 端口并使用 SSL 证书 </h4><p> 以 Nginx 为例，我们在 <code>% 你的 Nginx 安装目录 %/conf/nginx.conf</code> 里添加对 443 端口的监听。</p><p>需要在 <code>server&#123;...&#125;</code> 中配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  pwd.nicollcheng.cn;</span><br><span class="line">    ssl_certificate     G:\\Software\\nginx-proxy\\ssl\\server.crt;</span><br><span class="line">    #ssl 证书的 key 文件路径</span><br><span class="line">    ssl_certificate_key G:\\Software\\nginx-proxy\\ssl\\server.key;</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">         proxy_pass http://localhost:8000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/01/01/Windows%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90%E7%9A%84%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20250101234319255.png" class=""title="image-20250101234319255"><p>修改完成后，输入以下命令重新加载 <code>nginx.conf</code> 即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h4 id="方式一：强制浏览器和操作系统接受我们自己的证书颁发机构"><a href="# 方式一：强制浏览器和操作系统接受我们自己的证书颁发机构" class="headerlink" title="方式一：强制浏览器和操作系统接受我们自己的证书颁发机构"></a>方式一：强制浏览器和操作系统接受我们自己的证书颁发机构 </h4><p> 一种做法是：点击【高级】-&gt;【继续前往 192.168.x.x（不安全）】。</p><p>您可以强制浏览器和操作系统接受我们自己的证书颁发机构。因此，一旦安装 CA 证书并将其添加到受信任列表中，您将不会看到安全警告。</p><h4 id="方式二：在您的浏览器 - 操作系统中安装证书授权"><a href="# 方式二：在您的浏览器 - 操作系统中安装证书授权" class="headerlink" title="方式二：在您的浏览器 &#x2F; 操作系统中安装证书授权"></a>方式二：在您的浏览器 &#x2F; 操作系统中安装证书授权 </h4><p> 另一种做法：您还可以与您的开发团队共享 CA 证书，以便在他们的浏览器中安装。通过浏览器把证书导入并设置为“受信任”，以后该电脑访问网站就可以安全地连接 Web 服务器了。</p><ol><li><a href="https://support.apple.com/en-in/guide/keychain-access/kyca2431/mac">MAC 用户查看此指引</a></li><li><a href="https://docs.vmware.com/en/VMware-Adapter-for-SAP-Landscape-Management/2.1.0/Installation-and-Administration-Guide-for-VLA-Administrators/GUID-D60F08AD-6E54-4959-A272-458D08B8B038.html">Windows 用户查看此指引</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;OpenSSL&quot;&gt;&lt;a href=&quot;#OpenSSL&quot; class=&quot;headerlink&quot; title=&quot;OpenSSL&quot;&gt;&lt;/a&gt;OpenSSL&lt;/h2&gt;&lt;h3 id=&quot;安装 OpenSSL&quot;&gt;&lt;a href=&quot;# 安装 OpenSSL&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="Nginx" scheme="https://emryscheng.github.io/categories/Nginx/"/>
    
    <category term="反向代理" scheme="https://emryscheng.github.io/categories/Nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
    <category term="OpenSSL" scheme="https://emryscheng.github.io/categories/Nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/OpenSSL/"/>
    
    <category term="自签名证书" scheme="https://emryscheng.github.io/categories/Nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/OpenSSL/%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6/"/>
    
    
    <category term="OpenSSL" scheme="https://emryscheng.github.io/tags/OpenSSL/"/>
    
    <category term="Nginx" scheme="https://emryscheng.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Github 克隆私人仓库报错</title>
    <link href="https://emryscheng.github.io/2024/12/02/Github%E5%85%8B%E9%9A%86%E7%A7%81%E4%BA%BA%E4%BB%93%E5%BA%93%E6%8A%A5%E9%94%99/"/>
    <id>https://emryscheng.github.io/2024/12/02/Github%E5%85%8B%E9%9A%86%E7%A7%81%E4%BA%BA%E4%BB%93%E5%BA%93%E6%8A%A5%E9%94%99/</id>
    <published>2024-12-02T03:28:37.000Z</published>
    <updated>2024-12-02T13:22:19.203Z</updated>
    
    <content type="html"><![CDATA[<p> 当克隆某一私有项目时报错 </p><img src="/2024/12/02/Github%E5%85%8B%E9%9A%86%E7%A7%81%E4%BA%BA%E4%BB%93%E5%BA%93%E6%8A%A5%E9%94%99/image-20241202113128459.png" class=""title="image-20241202113128459"><p> 就算这个私有项目是我所有。</p><span id="more"></span><p> 通过查阅资料，首先重新 generate token。点击头像，选择 settings&gt;Developer settings&gt;Personal access tokens, 点击 generate new tokens，生成新的 tokens 后复制。</p><img src="/2024/12/02/Github%E5%85%8B%E9%9A%86%E7%A7%81%E4%BA%BA%E4%BB%93%E5%BA%93%E6%8A%A5%E9%94%99/59a781ff15575689eb37ae3a921b2963.jpeg" class=""title="img"><img src="/2024/12/02/Github%E5%85%8B%E9%9A%86%E7%A7%81%E4%BA%BA%E4%BB%93%E5%BA%93%E6%8A%A5%E9%94%99/e1afa7b78a0e0fe7624c8fea43dd8f2b.jpeg" class=""title="img"><p> 按照以下的格式重新 clone 仓库即可：</p><p> 其中 useName 用自己的用户名替换，token 用刚刚复制的 token 值替换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://userName:token@github.com/EmmaammE/CohortVA.git</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;当克隆某一私有项目时报错&lt;/p&gt;
&lt;img src=&quot;/2024/12/02/Github%E5%85%8B%E9%9A%86%E7%A7%81%E4%BA%BA%E4%BB%93%E5%BA%93%E6%8A%A5%E9%94%99/image-20241202113128459.png&quot; class=&quot;&quot; title=&quot;image-20241202113128459&quot;&gt;

&lt;p&gt;就算这个私有项目是我所有。&lt;/p&gt;</summary>
    
    
    
    <category term="Github" scheme="https://emryscheng.github.io/categories/Github/"/>
    
    
    <category term="Github" scheme="https://emryscheng.github.io/tags/Github/"/>
    
    <category term="Git" scheme="https://emryscheng.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
